{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u043D\\u0430\\u044F\\\\ToDo-app-main\\\\src\\\\components\\\\AccountSection\\\\DarkMode.tsx\";\nimport React, { useEffect, useState } from \"react\";\nconst DarkMode = () => {\n  const [isCurrentDarkmode, setIsCurrentDarkmode] = useState(() => {\n    const darkModeWasSet = localStorage.getItem(\"darkmode\");\n    if (darkModeWasSet) return true;else return false;\n  });\n  const toggleDarkMode = () => {\n    setIsCurrentDarkmode(prevState => !prevState);\n  };\n  useEffect(() => {\n    const html = document.querySelector(\"html\");\n    if (isCurrentDarkmode) {\n      var _document$querySelect;\n      html.classList.add(\"dark\");\n      localStorage.setItem(\"darkmode\", \"true\");\n      (_document$querySelect = document.querySelector('meta[name=\"theme-color\"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute(\"content\", \"#0f172a\");\n    } else {\n      var _document$querySelect2;\n      html.classList.remove(\"dark\");\n      localStorage.removeItem(\"darkmode\");\n      (_document$querySelect2 = document.querySelector('meta[name=\"theme-color\"]')) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.setAttribute(\"content\", \"#e2e8f0\");\n    }\n  }, [isCurrentDarkmode]);\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"mt-8 text-left flex items-center justify-between\",\n    onClick: toggleDarkMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"dark:text-slate-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Darkmode\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-10 h-5 bg-slate-200 rounded-full px-0.5 dark:bg-slate-700/[.3] relative flex items-center dark:justify-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-4 h-4 rounded-full bg-violet-600 absolute\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  })));\n};\nexport default React.memo(DarkMode);","map":{"version":3,"names":["React","useEffect","useState","DarkMode","isCurrentDarkmode","setIsCurrentDarkmode","darkModeWasSet","localStorage","getItem","toggleDarkMode","prevState","html","document","querySelector","_document$querySelect","classList","add","setItem","setAttribute","_document$querySelect2","remove","removeItem","createElement","className","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","memo"],"sources":["C:/Users/Admin/Desktop/Дипломная/ToDo-app-main/src/components/AccountSection/DarkMode.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst DarkMode: React.FC = () => {\n  const [isCurrentDarkmode, setIsCurrentDarkmode] = useState<boolean>(() => {\n    const darkModeWasSet = localStorage.getItem(\"darkmode\");\n    if (darkModeWasSet) return true;\n    else return false;\n  });\n  const toggleDarkMode = () => {\n    setIsCurrentDarkmode((prevState) => !prevState);\n  };\n\n  useEffect(() => {\n    const html = document.querySelector<HTMLHtmlElement>(\"html\")!;\n    if (isCurrentDarkmode) {\n      html.classList.add(\"dark\");\n      localStorage.setItem(\"darkmode\", \"true\");\n      document\n        .querySelector('meta[name=\"theme-color\"]')\n        ?.setAttribute(\"content\", \"#0f172a\");\n    } else {\n      html.classList.remove(\"dark\");\n      localStorage.removeItem(\"darkmode\");\n      document\n        .querySelector('meta[name=\"theme-color\"]')\n        ?.setAttribute(\"content\", \"#e2e8f0\");\n    }\n  }, [isCurrentDarkmode]);\n\n  return (\n    <button\n      className=\"mt-8 text-left flex items-center justify-between\"\n      onClick={toggleDarkMode}\n    >\n      <span className=\"dark:text-slate-200\">Darkmode</span>\n      <div className=\"w-10 h-5 bg-slate-200 rounded-full px-0.5 dark:bg-slate-700/[.3] relative flex items-center dark:justify-end\">\n        <div className=\"w-4 h-4 rounded-full bg-violet-600 absolute\"></div>\n      </div>\n    </button>\n  );\n};\n\nexport default React.memo(DarkMode);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAC/B,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGH,QAAQ,CAAU,MAAM;IACxE,MAAMI,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,IAAIF,cAAc,EAAE,OAAO,IAAI,CAAC,KAC3B,OAAO,KAAK;EACnB,CAAC,CAAC;EACF,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3BJ,oBAAoB,CAAEK,SAAS,IAAK,CAACA,SAAS,CAAC;EACjD,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd,MAAMU,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAkB,MAAM,CAAE;IAC7D,IAAIT,iBAAiB,EAAE;MAAA,IAAAU,qBAAA;MACrBH,IAAI,CAACI,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC1BT,YAAY,CAACU,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;MACxC,CAAAH,qBAAA,GAAAF,QAAQ,CACLC,aAAa,CAAC,0BAA0B,CAAC,cAAAC,qBAAA,uBAD5CA,qBAAA,CAEII,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC;IACxC,CAAC,MAAM;MAAA,IAAAC,sBAAA;MACLR,IAAI,CAACI,SAAS,CAACK,MAAM,CAAC,MAAM,CAAC;MAC7Bb,YAAY,CAACc,UAAU,CAAC,UAAU,CAAC;MACnC,CAAAF,sBAAA,GAAAP,QAAQ,CACLC,aAAa,CAAC,0BAA0B,CAAC,cAAAM,sBAAA,uBAD5CA,sBAAA,CAEID,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC;IACxC;EACF,CAAC,EAAE,CAACd,iBAAiB,CAAC,CAAC;EAEvB,oBACEJ,KAAA,CAAAsB,aAAA;IACEC,SAAS,EAAC,kDAAkD;IAC5DC,OAAO,EAAEf,cAAe;IAAAgB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAExB9B,KAAA,CAAAsB,aAAA;IAAMC,SAAS,EAAC,qBAAqB;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAc,CAAC,eACrD9B,KAAA,CAAAsB,aAAA;IAAKC,SAAS,EAAC,8GAA8G;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3H9B,KAAA,CAAAsB,aAAA;IAAKC,SAAS,EAAC,6CAA6C;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAM,CAC/D,CACC,CAAC;AAEb,CAAC;AAED,eAAe9B,KAAK,CAAC+B,IAAI,CAAC5B,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}