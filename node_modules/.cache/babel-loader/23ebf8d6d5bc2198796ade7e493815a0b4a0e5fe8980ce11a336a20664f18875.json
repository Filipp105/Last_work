{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u043D\\u0430\\u044F\\\\ToDo-app-main\\\\src\\\\components\\\\Utilities\\\\ModalDirectory.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalDirectory = ({\n  onClose,\n  dirName,\n  onConfirm,\n  btnText,\n  title\n}) => {\n  _s();\n  const directories = useAppSelector(store => store.tasks.directories);\n  const [errorDirectoryName, setErrorDirectoryName] = useState(false);\n  const [newDirName, setNewDirName] = useState(dirName ? dirName : \"\");\n  const checkDirNameExists = val => {\n    const directoryDoesNotExist = directories.every(dir => dir !== val);\n    if (directoryDoesNotExist || dirName === val) {\n      setErrorDirectoryName(false);\n    } else {\n      setErrorDirectoryName(true);\n    }\n  };\n  const confirmDirNameHandler = e => {\n    e.preventDefault();\n    if (errorDirectoryName) return;\n    onConfirm(newDirName);\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: onClose,\n    title: title,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"stylesInputsField\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dir-name\",\n          className: \"\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"dir-name\",\n          placeholder: \"Enter a directory name\",\n          value: newDirName,\n          onChange: ({\n            target\n          }) => setNewDirName(target.value),\n          className: `inputStyles block w-full`,\n          onInput: ({\n            currentTarget\n          }) => checkDirNameExists(currentTarget.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), errorDirectoryName && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\",\n          children: \"Directory name already exists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn mt-6\",\n        onClick: confirmDirNameHandler,\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ModalDirectory, \"GS/xpO8m3XODiRSShhF1L3KC4yY=\", false, function () {\n  return [useAppSelector];\n});\n_c = ModalDirectory;\nexport default ModalDirectory;\nvar _c;\n$RefreshReg$(_c, \"ModalDirectory\");","map":{"version":3,"names":["React","useState","useAppSelector","Modal","jsxDEV","_jsxDEV","ModalDirectory","onClose","dirName","onConfirm","btnText","title","_s","directories","store","tasks","errorDirectoryName","setErrorDirectoryName","newDirName","setNewDirName","checkDirNameExists","val","directoryDoesNotExist","every","dir","confirmDirNameHandler","e","preventDefault","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","target","onInput","currentTarget","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Дипломная/ToDo-app-main/src/components/Utilities/ModalDirectory.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport Modal from \"./Modal\";\n\nconst ModalDirectory: React.FC<{\n  onClose: () => void;\n  dirName?: string;\n  onConfirm: (newDirName: string) => void;\n  btnText: string;\n  title: string;\n}> = ({ onClose, dirName, onConfirm, btnText, title }) => {\n  const directories = useAppSelector((store) => store.tasks.directories);\n\n  const [errorDirectoryName, setErrorDirectoryName] = useState<boolean>(false);\n  const [newDirName, setNewDirName] = useState<string>(dirName ? dirName : \"\");\n\n  const checkDirNameExists = (val: string) => {\n    const directoryDoesNotExist = directories.every(\n      (dir: string) => dir !== val\n    );\n\n    if (directoryDoesNotExist || dirName === val) {\n      setErrorDirectoryName(false);\n    } else {\n      setErrorDirectoryName(true);\n    }\n  };\n\n  const confirmDirNameHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (errorDirectoryName) return;\n    onConfirm(newDirName);\n    onClose();\n  };\n\n  return (\n    <Modal onClose={onClose} title={title}>\n      <form className=\"stylesInputsField\">\n        <div className=\"relative\">\n          <label htmlFor=\"dir-name\" className=\"\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"dir-name\"\n            placeholder=\"Enter a directory name\"\n            value={newDirName}\n            onChange={({ target }) => setNewDirName(target.value)}\n            className={`inputStyles block w-full`}\n            onInput={({ currentTarget }) =>\n              checkDirNameExists(currentTarget.value)\n            }\n          />\n          {errorDirectoryName && (\n            <div className=\"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\">\n              Directory name already exists\n            </div>\n          )}\n        </div>\n        <button className=\"btn mt-6\" onClick={confirmDirNameHandler}>\n          {btnText}\n        </button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default ModalDirectory;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,cAMJ,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,SAAS;EAAEC,OAAO;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAMC,WAAW,GAAGX,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,WAAW,CAAC;EAEtE,MAAM,CAACG,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAU,KAAK,CAAC;EAC5E,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAASO,OAAO,GAAGA,OAAO,GAAG,EAAE,CAAC;EAE5E,MAAMY,kBAAkB,GAAIC,GAAW,IAAK;IAC1C,MAAMC,qBAAqB,GAAGT,WAAW,CAACU,KAAK,CAC5CC,GAAW,IAAKA,GAAG,KAAKH,GAC3B,CAAC;IAED,IAAIC,qBAAqB,IAAId,OAAO,KAAKa,GAAG,EAAE;MAC5CJ,qBAAqB,CAAC,KAAK,CAAC;IAC9B,CAAC,MAAM;MACLA,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC;EAED,MAAMQ,qBAAqB,GAAIC,CAAmB,IAAK;IACrDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIX,kBAAkB,EAAE;IACxBP,SAAS,CAACS,UAAU,CAAC;IACrBX,OAAO,CAAC,CAAC;EACX,CAAC;EAED,oBACEF,OAAA,CAACF,KAAK;IAACI,OAAO,EAAEA,OAAQ;IAACI,KAAK,EAAEA,KAAM;IAAAiB,QAAA,eACpCvB,OAAA;MAAMwB,SAAS,EAAC,mBAAmB;MAAAD,QAAA,gBACjCvB,OAAA;QAAKwB,SAAS,EAAC,UAAU;QAAAD,QAAA,gBACvBvB,OAAA;UAAOyB,OAAO,EAAC,UAAU;UAACD,SAAS,EAAC,EAAE;UAAAD,QAAA,EAAC;QAEvC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACR7B,OAAA;UACE8B,IAAI,EAAC,MAAM;UACXC,EAAE,EAAC,UAAU;UACbC,WAAW,EAAC,wBAAwB;UACpCC,KAAK,EAAEpB,UAAW;UAClBqB,QAAQ,EAAEA,CAAC;YAAEC;UAAO,CAAC,KAAKrB,aAAa,CAACqB,MAAM,CAACF,KAAK,CAAE;UACtDT,SAAS,EAAG,0BAA0B;UACtCY,OAAO,EAAEA,CAAC;YAAEC;UAAc,CAAC,KACzBtB,kBAAkB,CAACsB,aAAa,CAACJ,KAAK;QACvC;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,EACDlB,kBAAkB,iBACjBX,OAAA;UAAKwB,SAAS,EAAC,6FAA6F;UAAAD,QAAA,EAAC;QAE7G;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACN7B,OAAA;QAAQwB,SAAS,EAAC,UAAU;QAACc,OAAO,EAAElB,qBAAsB;QAAAG,QAAA,EACzDlB;MAAO;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ,CAAC;AAACtB,EAAA,CA7DIN,cAMJ;EAAA,QACoBJ,cAAc;AAAA;AAAA0C,EAAA,GAP9BtC,cAMJ;AAyDF,eAAeA,cAAc;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}