{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u043D\\u0430\\u044F\\\\ToDo-app-main\\\\src\\\\components\\\\Routes\\\\Directory.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport useDescriptionTitle from \"../hooks/useDescriptionTitle\";\nimport LayoutRoutes from \"../Utilities/LayoutRoutes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Directory = () => {\n  _s();\n  var _params$dir;\n  const tasks = useAppSelector(state => state.tasks.tasks);\n  const directories = useAppSelector(state => state.tasks.directories);\n  const params = useParams();\n  const navigate = useNavigate();\n  const dir = (_params$dir = params.dir) !== null && _params$dir !== void 0 ? _params$dir : \"\"; // Задаем значение по умолчанию\n\n  useDescriptionTitle(`Tasks in \"${dir}\"`,\n  // Используем dir вместо params.dir\n  dir ? dir + \" directory\" : \"\");\n  const [tasksInCurrentDirectory, setTasksInCurrentDirectory] = useState([]);\n  useEffect(() => {\n    const dirExists = directories.includes(dir);\n    if (!dirExists) {\n      navigate(\"/\");\n    }\n    const tasksFiltered = tasks.filter(task => task.dir === dir);\n    setTasksInCurrentDirectory(tasksFiltered);\n  }, [directories, navigate, dir, tasks]);\n  return /*#__PURE__*/_jsxDEV(LayoutRoutes, {\n    title: `${dir}'s tasks` // Используем dir вместо params.dir\n    ,\n    tasks: tasksInCurrentDirectory\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Directory, \"62t/iDgdIpu37G/SeDvonan8K7o=\", false, function () {\n  return [useAppSelector, useAppSelector, useParams, useNavigate, useDescriptionTitle];\n});\n_c = Directory;\nexport default Directory;\nvar _c;\n$RefreshReg$(_c, \"Directory\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useParams","useAppSelector","useDescriptionTitle","LayoutRoutes","jsxDEV","_jsxDEV","Directory","_s","_params$dir","tasks","state","directories","params","navigate","dir","tasksInCurrentDirectory","setTasksInCurrentDirectory","dirExists","includes","tasksFiltered","filter","task","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Дипломная/ToDo-app-main/src/components/Routes/Directory.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Task } from \"../../interfaces\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport useDescriptionTitle from \"../hooks/useDescriptionTitle\";\nimport LayoutRoutes from \"../Utilities/LayoutRoutes\";\n\nconst Directory: React.FC = () => {\n  const tasks = useAppSelector((state) => state.tasks.tasks);\n  const directories = useAppSelector((state) => state.tasks.directories);\n  const params = useParams();\n  const navigate = useNavigate();\n\n  const dir = params.dir ?? \"\"; // Задаем значение по умолчанию\n\n  useDescriptionTitle(\n    `Tasks in \"${dir}\"`, // Используем dir вместо params.dir\n    dir ? dir + \" directory\" : \"\"\n  );\n\n  const [tasksInCurrentDirectory, setTasksInCurrentDirectory] = useState<Task[]>([]);\n\n  useEffect(() => {\n    const dirExists = directories.includes(dir);\n    if (!dirExists) {\n      navigate(\"/\");\n    }\n    const tasksFiltered = tasks.filter((task: Task) => task.dir === dir);\n    setTasksInCurrentDirectory(tasksFiltered);\n  }, [directories, navigate, dir, tasks]);\n\n  return (\n    <LayoutRoutes\n      title={`${dir}'s tasks`} // Используем dir вместо params.dir\n      tasks={tasksInCurrentDirectory}\n    />\n  );\n};\n\nexport default Directory;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAEzD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,YAAY,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,WAAA;EAChC,MAAMC,KAAK,GAAGR,cAAc,CAAES,KAAK,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAC1D,MAAME,WAAW,GAAGV,cAAc,CAAES,KAAK,IAAKA,KAAK,CAACD,KAAK,CAACE,WAAW,CAAC;EACtE,MAAMC,MAAM,GAAGZ,SAAS,CAAC,CAAC;EAC1B,MAAMa,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAMe,GAAG,IAAAN,WAAA,GAAGI,MAAM,CAACE,GAAG,cAAAN,WAAA,cAAAA,WAAA,GAAI,EAAE,CAAC,CAAC;;EAE9BN,mBAAmB,CAChB,aAAYY,GAAI,GAAE;EAAE;EACrBA,GAAG,GAAGA,GAAG,GAAG,YAAY,GAAG,EAC7B,CAAC;EAED,MAAM,CAACC,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGlB,QAAQ,CAAS,EAAE,CAAC;EAElFD,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAGN,WAAW,CAACO,QAAQ,CAACJ,GAAG,CAAC;IAC3C,IAAI,CAACG,SAAS,EAAE;MACdJ,QAAQ,CAAC,GAAG,CAAC;IACf;IACA,MAAMM,aAAa,GAAGV,KAAK,CAACW,MAAM,CAAEC,IAAU,IAAKA,IAAI,CAACP,GAAG,KAAKA,GAAG,CAAC;IACpEE,0BAA0B,CAACG,aAAa,CAAC;EAC3C,CAAC,EAAE,CAACR,WAAW,EAAEE,QAAQ,EAAEC,GAAG,EAAEL,KAAK,CAAC,CAAC;EAEvC,oBACEJ,OAAA,CAACF,YAAY;IACXmB,KAAK,EAAG,GAAER,GAAI,UAAU,CAAC;IAAA;IACzBL,KAAK,EAAEM;EAAwB;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEN,CAAC;AAACnB,EAAA,CA9BID,SAAmB;EAAA,QACTL,cAAc,EACRA,cAAc,EACnBD,SAAS,EACPD,WAAW,EAI5BG,mBAAmB;AAAA;AAAAyB,EAAA,GARfrB,SAAmB;AAgCzB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}