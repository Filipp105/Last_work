{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u043D\\u0430\\u044F\\\\ToDo-app-main\\\\src\\\\components\\\\Utilities\\\\ModalDirectory.tsx\";\nimport React, { useState } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport Modal from \"./Modal\";\nconst ModalDirectory = ({\n  onClose,\n  dirName,\n  onConfirm,\n  btnText,\n  title\n}) => {\n  const directories = useAppSelector(store => store.tasks.directories);\n  const [errorDirectoryName, setErrorDirectoryName] = useState(false);\n  const [newDirName, setNewDirName] = useState(dirName ? dirName : \"\");\n  const checkDirNameExists = val => {\n    const directoryDoesNotExist = directories.every(dir => dir !== val);\n    if (directoryDoesNotExist || dirName === val) {\n      setErrorDirectoryName(false);\n    } else {\n      setErrorDirectoryName(true);\n    }\n  };\n  const confirmDirNameHandler = e => {\n    e.preventDefault();\n    if (errorDirectoryName) return;\n    onConfirm(newDirName);\n    onClose();\n  };\n  return /*#__PURE__*/React.createElement(Modal, {\n    onClose: onClose,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"stylesInputsField\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"relative\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"dir-name\",\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"dir-name\",\n    placeholder: \"Enter a directory name\",\n    value: newDirName,\n    onChange: ({\n      target\n    }) => setNewDirName(target.value),\n    className: `inputStyles block w-full`,\n    onInput: ({\n      currentTarget\n    }) => checkDirNameExists(currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), errorDirectoryName && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Directory name already exists\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn mt-6\",\n    onClick: confirmDirNameHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, btnText)));\n};\nexport default ModalDirectory;","map":{"version":3,"names":["React","useState","useAppSelector","Modal","ModalDirectory","onClose","dirName","onConfirm","btnText","title","directories","store","tasks","errorDirectoryName","setErrorDirectoryName","newDirName","setNewDirName","checkDirNameExists","val","directoryDoesNotExist","every","dir","confirmDirNameHandler","e","preventDefault","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","type","id","placeholder","value","onChange","target","onInput","currentTarget","onClick"],"sources":["C:/Users/Admin/Desktop/Дипломная/ToDo-app-main/src/components/Utilities/ModalDirectory.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport Modal from \"./Modal\";\n\nconst ModalDirectory: React.FC<{\n  onClose: () => void;\n  dirName?: string;\n  onConfirm: (newDirName: string) => void;\n  btnText: string;\n  title: string;\n}> = ({ onClose, dirName, onConfirm, btnText, title }) => {\n  const directories = useAppSelector((store) => store.tasks.directories);\n\n  const [errorDirectoryName, setErrorDirectoryName] = useState<boolean>(false);\n  const [newDirName, setNewDirName] = useState<string>(dirName ? dirName : \"\");\n\n  const checkDirNameExists = (val: string) => {\n    const directoryDoesNotExist = directories.every(\n      (dir: string) => dir !== val\n    );\n\n    if (directoryDoesNotExist || dirName === val) {\n      setErrorDirectoryName(false);\n    } else {\n      setErrorDirectoryName(true);\n    }\n  };\n\n  const confirmDirNameHandler = (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (errorDirectoryName) return;\n    onConfirm(newDirName);\n    onClose();\n  };\n\n  return (\n    <Modal onClose={onClose} title={title}>\n      <form className=\"stylesInputsField\">\n        <div className=\"relative\">\n          <label htmlFor=\"dir-name\" className=\"\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"dir-name\"\n            placeholder=\"Enter a directory name\"\n            value={newDirName}\n            onChange={({ target }) => setNewDirName(target.value)}\n            className={`inputStyles block w-full`}\n            onInput={({ currentTarget }) =>\n              checkDirNameExists(currentTarget.value)\n            }\n          />\n          {errorDirectoryName && (\n            <div className=\"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\">\n              Directory name already exists\n            </div>\n          )}\n        </div>\n        <button className=\"btn mt-6\" onClick={confirmDirNameHandler}>\n          {btnText}\n        </button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default ModalDirectory;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}