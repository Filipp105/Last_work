{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u043D\\u0430\\u044F\\\\ToDo-app-main\\\\src\\\\components\\\\Menu\\\\Directories\\\\ContentDirectories.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../store/hooks\";\nimport { tasksActions } from \"../../../store/Tasks.store\";\nimport ModalDirectory from \"../../Utilities/ModalDirectory\";\nimport ItemDirectory from \"./ItemDirectory\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ContentDirectories = ({\n  classActive\n}) => {\n  _s();\n  const directories = useAppSelector(store => store.tasks.directories);\n  const [modalDirIsShown, setModalDirIsShown] = useState(false);\n  const dispatch = useAppDispatch();\n  const createNewDirectoryHandler = inputValue => {\n    const newDirectoryName = inputValue.trim();\n    if (newDirectoryName.length === 0) return;\n    const directoryDoesNotExist = directories.every(dir => dir !== newDirectoryName);\n    if (directoryDoesNotExist) {\n      dispatch(tasksActions.createDirectory(newDirectoryName));\n    }\n  };\n  const closeModalDirectoryHandler = () => {\n    setModalDirIsShown(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [modalDirIsShown && /*#__PURE__*/_jsxDEV(ModalDirectory, {\n      onClose: closeModalDirectoryHandler,\n      onConfirm: createNewDirectoryHandler,\n      btnText: \"Create\",\n      title: \"Create new directory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"max-h-36 overflow-auto\",\n      children: directories.map(dir => /*#__PURE__*/_jsxDEV(ItemDirectory, {\n        classActive: classActive,\n        dir: dir\n      }, dir, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setModalDirIsShown(true),\n      className: \"px-3 py-1 border-slate-300 dark:border-slate-700 border-2 ml-9 mt-2 rounded-md border-dashed hover:text-violet-500\",\n      children: \"+ New\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ContentDirectories, \"70xAY0xm0PpRl9mTcPqAIgPwNhg=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = ContentDirectories;\nexport default ContentDirectories;\nvar _c;\n$RefreshReg$(_c, \"ContentDirectories\");","map":{"version":3,"names":["React","useState","useAppDispatch","useAppSelector","tasksActions","ModalDirectory","ItemDirectory","jsxDEV","_jsxDEV","Fragment","_Fragment","ContentDirectories","classActive","_s","directories","store","tasks","modalDirIsShown","setModalDirIsShown","dispatch","createNewDirectoryHandler","inputValue","newDirectoryName","trim","length","directoryDoesNotExist","every","dir","createDirectory","closeModalDirectoryHandler","children","onClose","onConfirm","btnText","title","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Дипломная/ToDo-app-main/src/components/Menu/Directories/ContentDirectories.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../store/hooks\";\nimport { tasksActions } from \"../../../store/Tasks.store\";\nimport ModalDirectory from \"../../Utilities/ModalDirectory\";\nimport ItemDirectory from \"./ItemDirectory\";\n\nconst ContentDirectories: React.FC<{ classActive: string }> = ({\n  classActive,\n}) => {\n  const directories = useAppSelector((store) => store.tasks.directories);\n  const [modalDirIsShown, setModalDirIsShown] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n\n  const createNewDirectoryHandler = (inputValue: string) => {\n    const newDirectoryName: string = inputValue.trim();\n\n    if (newDirectoryName.length === 0) return;\n\n    const directoryDoesNotExist = directories.every(\n      (dir: string) => dir !== newDirectoryName\n    );\n\n    if (directoryDoesNotExist) {\n      dispatch(tasksActions.createDirectory(newDirectoryName));\n    }\n  };\n\n  const closeModalDirectoryHandler = () => {\n    setModalDirIsShown(false);\n  };\n\n  return (\n    <>\n      {modalDirIsShown && (\n        <ModalDirectory\n          onClose={closeModalDirectoryHandler}\n          onConfirm={createNewDirectoryHandler}\n          btnText=\"Create\"\n          title=\"Create new directory\"\n        />\n      )}\n\n      <ul className=\"max-h-36 overflow-auto\">\n        {directories.map((dir: string) => (\n          <ItemDirectory key={dir} classActive={classActive} dir={dir} />\n        ))}\n      </ul>\n      <button\n        onClick={() => setModalDirIsShown(true)}\n        className=\"px-3 py-1 border-slate-300 dark:border-slate-700 border-2 ml-9 mt-2 rounded-md border-dashed hover:text-violet-500\"\n      >\n        + New\n      </button>\n    </>\n  );\n};\n\nexport default ContentDirectories;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,cAAc,QAAQ,sBAAsB;AACrE,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,cAAc,MAAM,gCAAgC;AAC3D,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,kBAAqD,GAAGA,CAAC;EAC7DC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,WAAW,GAAGX,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,WAAW,CAAC;EACtE,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAU,KAAK,CAAC;EAEtE,MAAMkB,QAAQ,GAAGjB,cAAc,CAAC,CAAC;EAEjC,MAAMkB,yBAAyB,GAAIC,UAAkB,IAAK;IACxD,MAAMC,gBAAwB,GAAGD,UAAU,CAACE,IAAI,CAAC,CAAC;IAElD,IAAID,gBAAgB,CAACE,MAAM,KAAK,CAAC,EAAE;IAEnC,MAAMC,qBAAqB,GAAGX,WAAW,CAACY,KAAK,CAC5CC,GAAW,IAAKA,GAAG,KAAKL,gBAC3B,CAAC;IAED,IAAIG,qBAAqB,EAAE;MACzBN,QAAQ,CAACf,YAAY,CAACwB,eAAe,CAACN,gBAAgB,CAAC,CAAC;IAC1D;EACF,CAAC;EAED,MAAMO,0BAA0B,GAAGA,CAAA,KAAM;IACvCX,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAoB,QAAA,GACGb,eAAe,iBACdT,OAAA,CAACH,cAAc;MACb0B,OAAO,EAAEF,0BAA2B;MACpCG,SAAS,EAAEZ,yBAA0B;MACrCa,OAAO,EAAC,QAAQ;MAChBC,KAAK,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CACF,eAED9B,OAAA;MAAI+B,SAAS,EAAC,wBAAwB;MAAAT,QAAA,EACnChB,WAAW,CAAC0B,GAAG,CAAEb,GAAW,iBAC3BnB,OAAA,CAACF,aAAa;QAAWM,WAAW,EAAEA,WAAY;QAACe,GAAG,EAAEA;MAAI,GAAxCA,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuC,CAC/D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACL9B,OAAA;MACEiC,OAAO,EAAEA,CAAA,KAAMvB,kBAAkB,CAAC,IAAI,CAAE;MACxCqB,SAAS,EAAC,oHAAoH;MAAAT,QAAA,EAC/H;IAED;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACT,CAAC;AAEP,CAAC;AAACzB,EAAA,CAlDIF,kBAAqD;EAAA,QAGrCR,cAAc,EAGjBD,cAAc;AAAA;AAAAwC,EAAA,GAN3B/B,kBAAqD;AAoD3D,eAAeA,kBAAkB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}